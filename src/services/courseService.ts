
import { supabase } from '@/integrations/supabase/client';
import { Course } from '@/types';
import { Json } from '@/integrations/supabase/types';
import { jsonArrayToStringArray } from './utilService';

export const transformCourseData = (data: any): Course => {
  return {
    id: String(data.id),
    title: data.c_name || '',
    description: data.description || '',
    coverImage: data.cover_image || '/placeholder.svg',
    creatorId: data.creator_id || '',
    creatorName: data.creator_name || '',
    skillsOffered: Array.isArray(data.skill_offered) 
      ? jsonArrayToStringArray(data.skill_offered)
      : [],
    viewCount: data.enrolled_count || 0,
    createdAt: data.created_at || new Date().toISOString(),
    updatedAt: data.updated_at || new Date().toISOString(),
    systemPrompt: data.content_prompt || '',
    courseModules: data.course_modules || []
  };
};

export const fetchCourseById = async (courseId: string): Promise<Course | null> => {
  try {
    const { data, error } = await supabase
      .from('Courses_Table')
      .select('*')
      .eq('id', parseInt(courseId))
      .single();
    
    if (error) {
      console.error('Error fetching course:', error);
      return null;
    }
    
    if (!data) return null;
    
    return transformCourseData(data);
  } catch (error) {
    console.error('Exception fetching course:', error);
    return null;
  }
};

export const createCourseInDB = async (courseData: {
  title: string;
  description: string;
  coverImage: string;
  skillsOffered: string[];
  systemPrompt: string;
  creatorId: string;
  creatorName: string;
  courseModules?: any[];
}): Promise<Course | null> => {
  try {
    console.log("Creating course with data:", courseData);
    
    // Ensure we're authenticated
    const { data: sessionData } = await supabase.auth.getSession();
    if (!sessionData.session) {
      console.error('User is not authenticated');
      return null;
    }
    
    // Generate a numeric ID if needed (this will actually be auto-generated by Supabase)
    const courseId = Math.floor(Math.random() * 1000000);
    
    const { data, error } = await supabase
      .from('Courses_Table')
      .insert({
        c_name: courseData.title,
        description: courseData.description,
        cover_image: courseData.coverImage,
        skill_offered: courseData.skillsOffered,
        content_prompt: courseData.systemPrompt,
        creator_id: courseData.creatorId,
        creator_name: courseData.creatorName,
        enrolled_count: 0,
        course_modules: courseData.courseModules || []
      })
      .select()
      .single();

    if (error) {
      console.error('Error creating course:', error);
      return null;
    }

    console.log("Course created successfully:", data);
    return transformCourseData(data);
  } catch (error) {
    console.error('Exception creating course:', error);
    return null;
  }
};

export const fetchAllCourses = async (): Promise<Course[]> => {
  try {
    const { data, error } = await supabase
      .from('Courses_Table')
      .select('*');

    if (error) {
      console.error('Error fetching all courses:', error);
      return [];
    }

    if (!data || data.length === 0) return [];

    return data.map(course => transformCourseData(course));
  } catch (error) {
    console.error('Exception fetching all courses:', error);
    return [];
  }
};

// Update enrolled count for a course
export const updateCourseEnrolledCount = async (courseId: string): Promise<boolean> => {
  try {
    // First get the current course to get the current enrolled_count
    const { data: courseData, error: fetchError } = await supabase
      .from('Courses_Table')
      .select('enrolled_count')
      .eq('id', parseInt(courseId))
      .single();
      
    if (fetchError) {
      console.error('Error fetching course enrolled count:', fetchError);
      return false;
    }
    
    const currentCount = courseData?.enrolled_count || 0;
    
    // Update the enrolled count
    const { error: updateError } = await supabase
      .from('Courses_Table')
      .update({
        enrolled_count: currentCount + 1
      })
      .eq('id', parseInt(courseId));
      
    if (updateError) {
      console.error('Error updating course enrolled count:', updateError);
      return false;
    }
    
    return true;
  } catch (error) {
    console.error('Exception updating course enrolled count:', error);
    return false;
  }
};
